
from django.shortcuts import render
from django.contrib.auth.models import User

# Create your views here.
from django.shortcuts import render_to_response
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.cache import cache_control
from django.contrib import auth
from django.core.context_processors import csrf
from django.core import serializers
import pdb
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from django.contrib.auth import logout
from django.contrib.auth import login
from django.shortcuts import redirect
from django.template import RequestContext
from django.db.models import Count, Sum

from django.views.generic import TemplateView
import MySQLdb, sys
from django.db import transaction
import csv
import json
from django.db import IntegrityError
from django.core.exceptions import ObjectDoesNotExist
from django.utils.datastructures import MultiValueDictKeyError
import datetime
import time
from datetime import date, timedelta
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from trainmefitapp.views.constants import ExceptionMessages, ExceptionLabel
from trainmefitapp.models import * 
from datetime import date
from django.core.files.base import ContentFile
import smtplib
import urllib
import os
from trainmefit_project import settings


server='http://192.168.0.123:8008'



@csrf_exempt
def mobile_login(request):
    # pdb.set_trace()
    try:
        if request.method == 'POST':
            json_obj=json.loads(request.body)
            user = authenticate(username=json_obj['username'], password= json_obj['password'])
            if user is not None:
                if user.is_active:
                    data= {'success' : 'true','myprofileinfo' :get_myprofile(json_obj['username']), ExceptionLabel.ERROR_MESSAGE:'Successfully Login' }
                else:
                    data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'User Is Not Active'}
            else:
                data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Invalid Username or Password'}
        else:
            data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Invalid Request'}
    except User.DoesNotExist:
        print 'usr'
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'User Not Exist'}
    except MySQLdb.OperationalError, e:
        print e
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Internal Server Error '}
    except Exception, e:
        print e
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Internal Server Error '}
    return HttpResponse(json.dumps(data), content_type='application/json')






@csrf_exempt
def sign_up(request):
    print "in the sign_up"
    # pdb.set_trace()
    try:
        # if request.POST.get('email_id') is not None
        json_obj=json.loads(request.body)
        print json_obj
        user_obj = UserProfile(
            username=json_obj['email_id'],
            user_phone_number=json_obj['phoneno'],
            user_membership_id=get_membership(json_obj['membership']) 
            )
        user_obj.set_password(json_obj['password'])
        user_obj.email=json_obj['email_id']
        user_obj.user_id=json_obj['email_id']
        # user_obj.validate(user_obj)
        user_obj.save()

        print user_obj
        if user_obj:
            data= {'success' : 'true', ExceptionLabel.ERROR_MESSAGE:'Successfully Sign Up','email_id':user_obj.username }
        else:
            data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Not Sign Up Successfully'}
    except UserProfile.DoesNotExist,e:
        # print "in the main flow"
        data= {'success' : 'false', 'message':str(e)}
    except Exception, e:
        print e
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'User Already Exist '}
    return HttpResponse(json.dumps(data), content_type='application/json')





@csrf_exempt
@transaction.atomic
def google_sign_up(request):
    print 'Request Body : ',request.body
    sid = transaction.savepoint()
    try:
        print '============ Creating New User BY SOCIAL =============='
        json_obj=json.loads(request.body)
        # print json_obj
        user_obj = UserProfile(
            username=json_obj['email_id'],
            user_phone_number=json_obj['phone'] ,
            user_first_name= json_obj['first_name'],
            user_last_name= json_obj['last_name'],
            user_profile_picture =json_obj['user_profile_image'],
            user_sign_up_source =json_obj['sign_up_source'],
            # user_signupvia=json_obj['apns_token']

            )
        
        user_obj.email=json_obj['email_id']
        user_obj.user_id=json_obj['email_id']
        user_obj.set_password(json_obj['password'])
        user_obj.save()
        
        
        # cam_user_obj.cam_unique_id = 'CAM'+ datetime.date.today().strftime('%d%m%y') + str(cam_user_obj.id).zfill(6)
        filename = "IMG_%s_%s.jpg" % (user_obj.username, str(datetime.datetime.now().time()).replace('.','_')) # For giving filename to Image
        resource = urllib.urlopen(json_obj['user_profile_image'])
        
        # outfile = open(os.path.join(settings.MEDIA_ROOT+'/customer_images/', filename), "wb")
        user_obj.user_profile_picture = ContentFile(resource.read(), filename) # assign image to model

        user_obj.save()
        print "afetr final save"
        transaction.savepoint_commit(sid)
        #cam_user_obj.cam_unique_id = 'CAM'+ datetime.date.strftime('')
        data = {'success': 'true', 'error_message':'Successfully Sign Up','first_name':user_obj.user_first_name,'last_name':user_obj.user_last_name,'email_id':user_obj.username,"user_profile_image":server+user_obj.user_profile_picture.url,'status':'0' }
    except IntegrityError,e:
        print 'User Already Exist With User name',e
        data = {'success': 'true', 'error_message':'User Already Sign Up with this Username','status':'1'}
        return HttpResponse(json.dumps(data), content_type='application/json')
    except Exception,e:
        print 'Exception While creating new user',e
        transaction.savepoint_rollback(sid)
        data = {'success': 'false', 'error_message':'Failed to save user details'}
    return HttpResponse(json.dumps(data), content_type='application/json')





def get_membership(membership_type):
    membership_obj=MembershipMaster.objects.get(membership_type=membership_type)
    return membership_obj


@csrf_exempt
def edit_profile(request):
    print "in the create_profile"
    try:
        if request.method == 'POST':
            json_obj=json.loads(request.body)
            print json_obj
            user_id = json_obj['email_id']
            print json_obj['dob']
            user_obj                            = UserProfile.objects.get(username=user_id)
            user_obj.user_first_name            = json_obj['first_name']
            user_obj.user_last_name             = json_obj['last_name']
            user_obj.user_objective_id          = get_objective(json_obj['objective'])
            user_obj.user_gym_access            = json_obj['is_gym_access']
            user_obj.user_gender                = json_obj['gender']
            user_obj.user_dob                   = datetime.datetime.strptime(json_obj['dob'],'%d-%m-%Y').date()
            user_obj.user_height                = json_obj['height']
            user_obj.user_weight                = json_obj['weight']
            user_obj.user_profile_picture       = save_image(json_obj['user_profile_image'])
            user_obj.user_phone_number          = json_obj['phoneno']
            user_obj.validate_profile(user_obj)
            user_obj.save()


            # assign_program(user_obj)  

            # print user_obj
            print "done"
        if user_obj:
            data= {'success' : 'true', ExceptionLabel.ERROR_MESSAGE:'Profile Created Successfully' }
        else:
            data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Profile Not Created Successfully'}

    except UserProfile.DoesNotExist,e:
        # print "in the main flow"
        data= {'success' : 'false', 'message':str(e)}
    except Exception, e:
        print e
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Internal Server Error '}
    return HttpResponse(json.dumps(data), content_type='application/json')



@csrf_exempt
def create_profile(request):
    print "in the edit_profile"
    try:
        if request.method == 'POST':
            json_obj=json.loads(request.body)
            print json_obj
            user_id = json_obj['email_id']
            print json_obj['dob']
            user_obj                            = UserProfile.objects.get(username=user_id)
            user_obj.user_first_name            = json_obj['first_name']
            user_obj.user_last_name             = json_obj['last_name']
            user_obj.user_objective_id          = get_objective(json_obj['objective'])
            user_obj.user_gym_access            = json_obj['is_gym_access']
            user_obj.user_gender                = json_obj['gender']
            user_obj.user_dob                   = datetime.datetime.strptime(json_obj['dob'],'%d-%m-%Y').date()
            user_obj.user_height                = json_obj['height']
            user_obj.user_weight                = json_obj['weight']
            user_obj.user_profile_picture       = save_image(json_obj['user_profile_image'])
            # user_obj.validate_profile(user_obj)
            user_obj.save()

            send_admin_notification(user_obj)


            # assign_program(user_obj)  

            # print user_obj
            print "done"
        if user_obj:
            data= {'success' : 'true', ExceptionLabel.ERROR_MESSAGE:'Profile Created Successfully' ,'objective':str(user_obj.user_objective_id),'email_id':user_obj.username }
        else:
            data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Profile Not Created Successfully'}

    except UserProfile.DoesNotExist,e:
        # print "in the main flow"
        data= {'success' : 'false', 'message':str(e)}
    except Exception, e:
        print e
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Internal Server Error '}
    return HttpResponse(json.dumps(data), content_type='application/json')    

def get_objective(objective_name):
    print "hello in objective"
    objective_obj=ObjectiveMaster.objects.get(objective_name=objective_name)
    print objective_obj
    return objective_obj


def save_image(imgdata):
    import os
    print "save_image"
    # pdb.set_trace()
    try:
        # imgdata = json_obj['imgstr']
        # print imgdata
        filename = "uploaded_image%s.png" % str(datetime.datetime.now()).replace('.','_')
        decoded_image = imgdata.decode('base64')
        return ContentFile(decoded_image, filename)

    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
        return False         
    
def send_admin_notification(user_obj):
    print "in the send_password_reset_mail"
    #pdb.set_trace()
    gmail_user = "mohit.trainmefit@gmail.com"
    gmail_pwd = "tmf@123!"
    FROM = 'TrainMeFitApp'
    TO = ['pranali.khatode2012@gmail.com']


    try:
        TEXT="""User Name: %s \nPhone No: %s\nMembership: %s\nObjective:%s \nGender :%s\nDate Of Birth :%s\nHeight :%s\nWeight :%s\nGym Access :%s\n
           """%(str(user_obj.username),str(user_obj.user_phone_number),str(user_obj.user_membership_id.membership_type), str(user_obj.user_objective_id.objective_name),str(user_obj.user_gender),str(user_obj.user_dob.strftime('%d-%m-%Y')),str(user_obj.user_height),str(user_obj.user_weight),str(user_obj.user_gym_access))
        SUBJECT = "Notification For Customer Registration"
        server = smtplib.SMTP("smtp.gmail.com", 587) #or port 465 doesn't seem to work!
        server.ehlo()
        server.starttls()
        server.login(gmail_user, gmail_pwd)
        message = """From: %s\nTo: %s\nSubject: %s\n\n%s """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
        server.sendmail(FROM, TO, message)
        server.close()          
        data = {'success': 'true', 'message' : "Forgot Password Send Successfully" }

    except CAM.DoesNotExist, e:
        data = {'success': 'false', 'message':"Forgot Password Failed"}
        print "failed to send mail", e
    except Exception, e:
        print e
        data = {'success': 'false', 'message':"Server Error, Please try again!"}
    return HttpResponse(json.dumps(data), content_type='application/json')




def assign_program(user_obj):
    print "in the assign_program"
    try:
        program_obj=ProgramMaster.objects.get(
            program_user_objective_id=user_obj.user_objective_id,
            program_user_gender=user_obj.user_gender,
            program_gym_access=user_obj.user_gym_access
            )
        print program_obj
        if program_obj:
            user_program_obj=create_user_program_entry(user_obj,program_obj)
            program_work_obj=ProgramWorkoutMap.objects.filter(program_id = program_obj.program_id)
            if program_work_obj:
                for program_work in program_work_obj:
                    user_program_workout_obj=create_user_program_workout_entry(user_program_obj,program_work)
                    work_exe_obj=WorkoutExerciseMap.objects.filter(workout_id=program_work.workout_id)
                    if work_exe_obj:
                        for work_exe in work_exe_obj:
                            user_pgm_exer_obj=create_user_program_exercise_entry(user_program_workout_obj,work_exe)
                            
    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return True

def create_user_program_entry(user_obj,program_obj):
    print "in the create_user_program_entry "
    user_program_obj=UserProgramMap(
            user_id                          = user_obj,
            program_id                       = program_obj,
            user_program_name                = 'PRG'+'_'+user_obj.user_first_name,
            user_program_start_date          = datetime.datetime.now().date(),
            user_program_end_date            = datetime.datetime.now().date()+timedelta(days=30),
            user_program_program_status      ='active' 
            )
    user_program_obj.save()
    return user_program_obj


def create_user_program_workout_entry(user_program_obj,program_work):
    print "in the creatcreate_user_program_workout_entry "
    user_program_workout_obj=UserProgramWorkoutMaster(
            workout_id                                     = program_work.workout_id,
            user_program_id                                = user_program_obj,
            user_program_workout_name                      = program_work.workout_id.workout_name,
            user_program_workout_total_execise             = program_work.workout_id.workout_total_no_execise,
            user_program_workout_total_time                = '00:20:00',
            user_program_workout_type                      = program_work.workout_id.workout_type,
            user_program_workout_day                       = program_work.program_workout_day,
            user_program_workout_created_by                = 'admin',
            user_program_workout_updated_by                = 'admin',
            user_program_workout_created_date              = datetime.datetime.now().date(),
            user_program_workout_updated_date              = datetime.datetime.now().date(),    
            user_program_workout_status                    = 'active'
            )
    user_program_workout_obj.save()
    return user_program_workout_obj



def create_user_program_exercise_entry(user_program_workout_obj,work_exe):
    print "in the user_pgm_exercise_obj "
    user_pgm_exer_obj=UserProgramExerciseMap(
            user_program_workout_id                             = user_program_workout_obj,
            exercise_id                                         = work_exe.exercise_id,
            user_program_exercise_body_part_id                  = work_exe.exercise_id.exercise_body_part_id,
            user_program_exercise_video_id                      = work_exe.exercise_id.exercise_video_id,
            user_program_exercise_name                          = work_exe.exercise_id.exercise_name,
            user_program_exercise_time                          = work_exe.exercise_id.exercise_time,
            user_program_exercise_workout_total_sets            = work_exe.workout_exercise_total_sets,
            user_program_exercise_workout_total_reps            = work_exe.workout_exercise_total_reps,
            user_program_exercise_workout_time_between_set      = work_exe.workout_exercise_time_between_set,
            user_program_exercise_workout_total_time            = work_exe.workout_exercise_total_time,
            user_program_exercise_workout_rest_time             = work_exe.workout_exercise_rest_time,
            user_program_exercise_created_by                    ='admin',
            user_program_exercise_updated_by                    ='admin',
            user_program_exercise_created_date                  = datetime.datetime.now().date(),
            user_program_exercise_updated_date                  = datetime.datetime.now().date(),
            user_program_exercise_workout_status                = 'active'
            )
    user_pgm_exer_obj.save()
    return user_pgm_exer_obj




# @csrf_exempt
def get_myprofile(email_id):
    print "in the request.POST.get('username')"
    # pdb.set_trace()
    try:
        user_obj = UserProfile.objects.get(username=email_id)
        temp = {
            'first_name':user_obj.user_first_name,       
            'last_name':user_obj.user_last_name,        
            'user_objective':user_obj.user_objective_id.objective_name,
            'gym_access':user_obj.user_gym_access,
            'user_gender':user_obj.user_gender,
            'user_dob':user_obj.user_dob.strftime('%d-%m-%Y'),
            'user_height':user_obj.user_height,
            'user_weight':user_obj.user_weight,
            'user_email':user_obj.email,
            'user_phoneNo':user_obj.user_phone_number,
            'user_profile_image':server+user_obj.user_profile_picture.url  
        }
        
        # res_list.append(temp)
        data = { 'data': temp }
        
    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return data 
    # HttpResponse(json.dumps(data), content_type='application/json')



@csrf_exempt
def save_user_workout_info(request):
    print "save_user_workout_info"
    print request
    json_obj=json.loads(request.body)
    user_id = json_obj['email_id']
    try:
        if request.method == 'POST':
            user_obj                                          = UserProfile.objects.get(username=user_id)
            user_obj.user_leg_press_weight_lift               = json_obj['leg_press']
            user_obj.user_bench_press_weight_lift             = json_obj['bench_press']
            user_obj.user_bicep_curls_weight_lift             = json_obj['bicep_curls']
            user_obj.user_workouts_per_week                   = json_obj['workouts_per_week']
            user_obj.user_workout_intensity                   = json_obj['workout_intensity']
            
            user_obj.save()
            # print user_obj
            print "done"
        if user_obj:
            data= {'success' : 'true', ExceptionLabel.ERROR_MESSAGE:'Workout Information Saved Successfully' }
        else:
            data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Workout Information Not Saved Successfully'}
    except Exception, e:
        print e
        data= {'success' : 'false', ExceptionLabel.ERROR_MESSAGE:'Internal Server Error '}
    return HttpResponse(json.dumps(data), content_type='application/json')





def get_user_workout_info(request):
    # pdb.set_trace()
    try:
        user_id = request.GET.get('email_id')
        user_obj = UserProfile.objects.get(username=user_id)
        res_list=[]
        temp = {
            'leg_press_weight_lift':user_obj.user_leg_press_weight_lift,
            'bench_press_weight_lift':user_obj.user_bench_press_weight_lift,
            'bicep_curls_weight_lift':user_obj.user_bicep_curls_weight_lift,
            'workouts_per_week':user_obj.user_workouts_per_week,
            'workout_intensity':user_obj.user_workout_intensity,
            
        }
        
        res_list.append(temp)
        data = { 'data': temp }
        
    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')


def get_sample_workout(request):
    # pdb.set_trace()
    try:
        user_id = request.GET.get('email_id')
        sample_work_obj = SampleWorkout.objects.all()
        res_list=[]
        for sample_work in sample_work_obj:
            temp_obj= {

                'workout_name': sample_work.sample_workout_name,
                'workout_id': sample_work.sample_workout_id
            }
            res_list.append(temp_obj)
        data = {'data': res_list}

    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')  



def get_workout_details(request):
    print "get sample myworkout"
    # pdb.set_trace()
    try:
        user_id = request.GET.get('email_id')
        print user_id
        user_program_obj = UserProgramMap.objects.get(user_id=UserProfile.objects.get(username=user_id))
        if user_program_obj:
            program_work_obj = UserProgramWorkoutMaster.objects.filter(user_program_id=user_program_obj)
            if program_work_obj:
                print program_work_obj
                res_list=[]
                for program_work in program_work_obj:
                    temp_obj= {
                        'workout_day': program_work.user_program_workout_day,
                        'workout_description': program_work.user_program_workout_name
                    }
                    res_list.append(temp_obj)
        data = {'data': res_list}

    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')          




def get_workout_schedule(request):
    print "get sample myworkout"
    # pdb.set_trace()
    try:
        day_dict={'monday':'',
                 'tuesday':'',
                 'wednesday':'',
                 'thursday':'',
                 'friday':'',
                 'saturday':'',
                 'sunday':''
            }
        res_list=[]
        user_id = request.GET.get('email_id')
        print user_id
        user_program_obj = UserProgramMap.objects.get(user_id=UserProfile.objects.get(username=user_id))
        if user_program_obj:
            for day in day_dict:
                day_details=check_workout_for_day(user_program_obj,day)
                print "day_details"
                print day_details
                if day_details:
                    temp_obj= {
                    'workout_day':day , 
                    'workout_name':day_details['name'],
                    'workout_id':day_details['id']
                    }
                else:
                    temp_obj= {
                    'workout_day': day,
                    'workout_name':'RestDay',
                    'workout_id':'0'
                    }
                res_list.append(temp_obj)
        data = {'data': res_list*4,'start_date':str(user_program_obj.user_program_start_date.strftime('%d/%m/%Y'))}
    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')          

def check_workout_for_day(user_program_obj,day):
    try:
        program_work_obj = UserProgramWorkoutMaster.objects.get(user_program_id=user_program_obj,user_program_workout_day=day)
        if program_work_obj:
            result={
            'name':program_work_obj.user_program_workout_name,
            'id':program_work_obj.workout_id.workout_id
            }
            return result
    except Exception, e:
        print e
        return False


def get_exercise_details(request):
    print "get_exercise_details"
    # pdb.set_trace()
    try:
        res_list=[]
        # instructions=[]
        video_url=''
        user_program_obj = UserProgramMap.objects.get(user_id=UserProfile.objects.get(username=request.GET.get('email_id')))
        # print "user_program_obj"
        # print user_program_obj
        if user_program_obj:
            program_work_obj = UserProgramWorkoutMaster.objects.filter(user_program_id=user_program_obj,workout_id=Workout.objects.get(workout_id=request.GET.get('workout_id')))
            if program_work_obj:
                # print "program_work_obj"
                # print program_work_obj
                for program_work in program_work_obj:
                    print program_work
                    program_exe_obj=UserProgramExerciseMap.objects.filter(user_program_workout_id=program_work.user_program_workout_id)
                    print "program_exe_obj=================="
                    print program_exe_obj
                    if program_exe_obj:
                        for program_exe in program_exe_obj:
                            instructions=[]
                            images=[]
                            print program_exe.user_program_exercise_name
                            image_obj=ExcerciseImage.objects.filter(exercise_id=program_exe.exercise_id)
                            if image_obj:
                                for img in image_obj:
                                    images.append(server+img.exercise_image.url)
                            instructions_obj=InstructionMaster.objects.filter(instruction_exercise_id=program_exe.exercise_id)
                            if instructions_obj:
                                for inst in instructions_obj:
                                    instructions.append(inst.instruction_name)
                            print 'program_exe.user_program_exercise_video_id'
                            print program_exe.user_program_exercise_video_id
                            video=ExcerciseVideo.objects.get(exercise_video_id=program_exe.user_program_exercise_video_id)
                            print "video"
                            if video:
                                print video.exercise_video_url.url
                                video_url=video.exercise_video_url.url

                            temp ={
                                # 'workout_name' : program_work.user_program_workout_name,
                                'exercise_name':program_exe.user_program_exercise_name,
                                'exercise_id':program_exe.exercise_id,
                                'exercise_time':program_exe.user_program_exercise_time,
                                'exercise_instructions':instructions,
                                'exercise_images':images,
                                'exercise_video':server+video_url
                                }
                            instructions=[]
                       
                                # print instructions
                            
                            res_list.append(temp)
        data = {'data': res_list}

    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')




# @csrf_exempt
def get_workout_of_day(request):
    print "get_workout_of_day"
    # pdb.set_trace()
    try:
        # json_obj=json.loads(request.body)
        # user_id = json_obj['email_id']
        user_id = request.GET.get('email_id')
        print user_id
        res_list=[]
        user_program_obj = UserProgramMap.objects.get(user_id=UserProfile.objects.get(username=user_id))
        if user_program_obj:
            program_work_obj = UserProgramWorkoutMaster.objects.filter(user_program_id=user_program_obj,user_program_workout_day=request.GET.get('day'))
            print 'program_work_obj'
            print  program_work_obj
            if program_work_obj:
                for obj in program_work_obj:
                    print obj.workout_id
                    temp = {
                        'workout_name' :str(obj.user_program_workout_name),
                        'workout_id' : obj.workout_id.workout_id
                      
                        }
                    res_list.append(temp)
        data = {'data': res_list}

    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')        



# forgot password api
@csrf_exempt
def forgot_password(request):
    print "in the forgot_password"
    #pdb.set_trace()
    gmail_user = "training.tungsten@gmail.com"
    gmail_pwd = "team@tungsten74$"
    FROM = 'Train Me Fit Admin'
    TO = []

    try:
        if request.method == 'POST':
            json_obj=json.loads(request.body)
            user_name = json_obj['email_id']
            TO.append(user_name)
            user_obj = UserProfile.objects.get(username = json_obj['email_id'])
            # user_obj.set_password(password)
            # user_obj.save()
            print '---------password -------------',user_obj.password
            TEXT = "Your new password is" + " " + user_obj.password
            SUBJECT = "Change your Password"
            server = smtplib.SMTP("smtp.gmail.com", 587) #or port 465 doesn't seem to work!
            server.ehlo()
            server.starttls()
            server.login(gmail_user, gmail_pwd)
            message = """From: %s\nTo: %s\nSubject: %s\n\n%s """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
            server.sendmail(FROM, TO, message)
            server.close()          
            data = {'success': 'true', 'message' : "Forgot Password Send Successfully" }

    except User.DoesNotExist, e:
        data = {'success': 'false', 'message':"Forgot Password Failed"}
        print "failed to send mail", e
    except Exception, e:
        print e
        data = {'success': 'false', 'message':"Server Error, Please try again!"}
    return HttpResponse(json.dumps(data), content_type='application/json')



def get_restday_challenges(request):
    print "in the get_restday_challenges"
    # pdb.set_trace()
    try:
        user_id = request.GET.get('email_id')
        restday_obj = RestChallenges.objects.all()
        res_list=[]
        for restch in restday_obj:
            temp_obj= {

                'challenge_name': restch.rest_challenge_name,
                'workout_id': restch.workout_id
            }
            res_list.append(temp_obj)
        data = {'data': res_list}

    except Exception, e:
        print e
        data = {'data': None, ExceptionLabel.ERROR_MESSAGE:'Server Error - Please Try Again'}
    return HttpResponse(json.dumps(data), content_type='application/json')  


def send_contact_mail(request):
    print "in the forgot_password"
    #pdb.set_trace()
    gmail_user = "training.tungsten@gmail.com"
    gmail_pwd = "team@tungsten74$"
    FROM = 'TrainMeFitApp'
    TO = ['training.tungsten@gmail.com']


    try:
        issue = request.GET.get('message')
        print issue

        user_name = request.GET.get('email_id')
        print user_name

        TEXT="""User Name: %s \nQuery: %s\n
                """%(str(user_name),str(issue))           
    
        SUBJECT = "Query"
        server = smtplib.SMTP("smtp.gmail.com", 587) #or port 465 doesn't seem to work!
        server.ehlo()
        server.starttls()
        server.login(gmail_user, gmail_pwd)
        message = """From: %s\nTo: %s\nSubject: %s\n\n%s """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
        server.sendmail(FROM, TO, message)
        server.close()          
        data = {'success': 'true', 'message' : "Query Sent Successfully" }

    except User.DoesNotExist, e:
        data = {'success': 'false', 'message':"Query not Sent Successfully"}
        print "failed to send mail", e
    except Exception, e:
        print e
        data = {'success': 'false', 'message':"Server Error, Please try again!"}
    return HttpResponse(json.dumps(data), content_type='application/json')




@cache_control(no_cache=True, must_revalidate=True, no_store=True)
def redirect_to_reset_password_page(request):
    print "in the redirect_to_reset_password_page"
    try:
                  
        cam_id = request.GET.get('cam_id')
        # cam_id=CAM.objects.get(cam_email='maldhureakshay@gmail.com')
        print "cam_id"
        print cam_id

        #print 'customer id' + customer_id + ''
        print 'I am in page'
        data = {'hello':'Hello How are You..!','cam_id':cam_id }
        # data = {'hello':'Hello How are You..!' }
    except MySQLdb.OperationalError, e:
        data = {'success': 'false', 'error_message' : 'Failed To Update the profile pic on server'}
    #return HttpResponse(json.dumps(data), content_type='application/json')
    return render(request,'forget-password.html',data) 



# This is for reset the password through link
@csrf_exempt
def update_new_password(request):
    print "in tyhe  update_new_password "
    print request.POST
    try:
        cam_id = request.POST.get('cam_id')
        print cam_id
        cam   = CAM.objects.get(id=cam_id)
        confirm_password    = request.POST.get('confirm_password')
        new_password        = request.POST.get('new_password')
        print cam
        if new_password == confirm_password:
            cam.set_password(new_password)
            cam.save()
            print 'done'
            data = {'success': 'true','error_message': 'Thank you.Your password has been reseted.'}
            return redirect('http://192.168.0.121:8000/')
        else:
            data = {'success': 'false', 'error_message': 'Password Should be same'}
    except CAM.DoesNotExist, e:
        print e
        data = {'success': 'false', 'message':"User Not Found, Please try another one or Sign Up!"}
    except MySQLdb.OperationalError, e:
        data = {'success': 'false', 'error_message' : 'Failed To Update the profile pic on server'}
    return HttpResponse(json.dumps(data), content_type='application/json')


    
def send_password_reset_mail(request):
    print "in the send_password_reset_mail"
    #pdb.set_trace()
    gmail_user = "training.tungsten@gmail.com"
    gmail_pwd = "team@tungsten74$"
    FROM = 'Dial A Room'
    TO = ['akshay.kumar@tungstenbigdata.com','pranali.khatode2012@gmail.com']


    try:
        cam_email = request.GET.get('email')
        cam_id=CAM.objects.get(cam_email=cam_email)
        print "cam_id======================================================="
        print cam_id.id
        TO.append(cam_email)
        
        # TEXT="""User ID: %s \nName: %s\nApartment Name: %s\nBooking Id:%s \nIssue :%s \n
        #         """%(str(json_obj['user_id']),str(cam_object.cam_first_name),str(apartment_name), str(json_obj['booking_id']),str(json_obj['message']))
        TEXT=RESET_URL + str(cam_id.id)+ '&test_cam_test=RqhFbyMweTJzpdU8EEq73W'
        SUBJECT = "Reset Password Link"
        server = smtplib.SMTP("smtp.gmail.com", 587) #or port 465 doesn't seem to work!
        server.ehlo()
        server.starttls()
        server.login(gmail_user, gmail_pwd)
        message = """From: %s\nTo: %s\nSubject: %s\n\n%s """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
        server.sendmail(FROM, TO, message)
        server.close()          
        data = {'success': 'true', 'message' : "Forgot Password Send Successfully" }

    except CAM.DoesNotExist, e:
        data = {'success': 'false', 'message':"Forgot Password Failed"}
        print "failed to send mail", e
    except Exception, e:
        print e
        data = {'success': 'false', 'message':"Server Error, Please try again!"}
    return HttpResponse(json.dumps(data), content_type='application/json')


